// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Customer {
  customer_id Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  token       String?
  address     String
  phone       String
  orders      Order[]
  cart        Cart?
  wishlist    Wishlist?
}

model Admin {
  admin_id Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  token    String?
  role     String
}

model Order {
  order_id     Int         @id @default(autoincrement())
  order_date   DateTime    @default(now())
  total_amount Decimal
  status       String
  customer     Customer    @relation(fields: [customer_id], references: [customer_id])
  customer_id  Int
  payment      Payment     @relation(fields: [payment_id], references: [payment_id])
  payment_id   Int
  shipment     Shipment    @relation(fields: [shipment_id], references: [shipment_id])
  shipment_id  Int
  promo        Promo?      @relation(fields: [promo_id], references: [promo_id])
  promo_id     Int?        @unique
  order_items  OrderItem[]
}

model Product {
  product_id  Int       @id @default(autoincrement())
  name        String
  description String?
  category    Category  @relation(fields: [category_id], references: [category_id])
  category_id Int
  variants    Variant[]
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model OrderItem {
  order_item_id Int     @id @default(autoincrement())
  order         Order   @relation(fields: [order_id], references: [order_id])
  order_id      Int
  variant       Variant @relation(fields: [variant_id], references: [variant_id])
  variant_id    Int
  quantity      Int
  unit_price    Decimal
}

model Cart {
  cart_id     Int       @id @default(autoincrement())
  quantity    Int
  customer    Customer  @relation(fields: [customer_id], references: [customer_id])
  customer_id Int       @unique
  variants    Variant[]
}

model Wishlist {
  wishlist_id Int       @id @default(autoincrement())
  customer    Customer  @relation(fields: [customer_id], references: [customer_id])
  customer_id Int       @unique
  variants    Variant[]
}

model Variant {
  variant_id      Int             @id @default(autoincrement())
  key             String
  value           String
  price           Decimal
  stock_quantity  Int
  product         Product         @relation(fields: [product_id], references: [product_id])
  product_id      Int
  order_items     OrderItem[]
  inventory_items InventoryItem[]
  promo           Promo?
  carts           Cart[]
  wishlists       Wishlist[]
}

model Payment {
  payment_id Int     @id @default(autoincrement())
  method     String
  amount     Decimal
  orders     Order[]
}

model Shipment {
  shipment_id   Int      @id @default(autoincrement())
  address       String
  shipping_date DateTime
  orders        Order[]
}

model Promo {
  promo_id          Int      @id @default(autoincrement())
  discount          Decimal
  order             Order?
  variant           Variant? @relation(fields: [variantVariant_id], references: [variant_id])
  variantVariant_id Int?     @unique
}

model Branch {
  branch_id       Int             @id @default(autoincrement())
  name            String
  location        String
  inventory_items InventoryItem[]
}

model InventoryItem {
  inventory_item_id Int      @id @default(autoincrement())
  variant           Variant  @relation(fields: [variant_id], references: [variant_id])
  variant_id        Int
  branch            Branch   @relation(fields: [branch_id], references: [branch_id])
  branch_id         Int
  stock_quantity    Int
  last_update       DateTime @default(now())
}
